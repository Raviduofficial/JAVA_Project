create database javaMiniProject;
use javaMiniProject;

create table user 
(
user_id char(6) primary key NOT NULL,
user_password varchar(15) NOT NULL,
user_name varchar(50) NOT NULL,
user_email varchar(50) ,
user_phone BIGINT,
user_pro_pic varchar(200),
user_role ENUM('admin','lecturer','undergraduate','tech_officer') NOT NULL

);

create table admin
(
admin_id char(6) primary key
);

create table lecturer
(
lec_id char(6) primary key
);

create table undergraduate
(
ug_id char(6) primary key,
ug_batch INT
);

create table tech_officer
(
to_id char(6) primary key,
to_department varchar(3)
);

create table notice
(
notice_id int AUTO_INCREMENT primary key ,
notice_title varchar(30),
notice_content varchar(500),
notice_date DATE
);

create table time_table
(
time_table_id varchar(6) primary key,
department varchar(3),
lec_id char(6),
course_id char(7),
admin_id char(6),
day varchar(10),
time varchar(20),
session_type ENUM('theory','practical')
);


create table marks
(
mark_id int AUTO_INCREMENT primary key,
lec_id char(6),
ug_id char(6),
course_id char(7),
quiz_1 float,
quiz_2 float,
quiz_3 float,
quiz_4 float,
assesment_1 float,
assesment_2 float,
mid_term float,
final_theory float,
final_practical float
);

create table course
(
course_id char(7) primary key,
course_name varchar(50),
lec_id char(6),
credit INT,
course_type ENUM('theory','practical','both'),
course_content varchar(200)
);

CREATE TABLE medical (
    medical_id INT AUTO_INCREMENT PRIMARY KEY,
    ug_id VARCHAR(10) NOT NULL,
    course_id VARCHAR(10) NOT NULL,
    session_type VARCHAR(10) NOT NULL,
    reason VARCHAR(255) NOT NULL,
    medical_date DATE NOT NULL,
    medical_status VARCHAR(20) NOT NULL,
    to_id VARCHAR(10) NOT NULL,
    atten_id INT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES course(course_id), 
    FOREIGN KEY (ug_id) REFERENCES user(ug_id)  
);


create table attendance
(
atten_id int AUTO_INCREMENT primary key,
to_id char(6),
ug_id char(6),
course_id char(7),
atten_date DATE,
session_type ENUM('theory','practical') NOT NULL,
atten_status ENUM('present','absent','medical') NOT NULL
);



alter table admin add foreign key(admin_id) references user(user_id) on update cascade;
alter table undergraduate add foreign key(ug_id) references user(user_id) on update cascade;
alter table lecturer add foreign key(lec_id) references user(user_id) on update cascade;
alter table tech_officer add foreign key(to_id) references user(user_id) on update cascade;

alter table attendance add foreign key(ug_id) references undergraduate(ug_id) on update cascade;
alter table attendance add foreign key(course_id) references course(course_id) on update cascade;
alter table attendance add foreign key(to_id) references tech_officer(to_id) on update cascade;

alter table medical add foreign key(ug_id) references undergraduate(ug_id) on update cascade;
alter table medical add foreign key(course_id) references course(course_id) on update cascade;
alter table medical add foreign key(to_id) references tech_officer(to_id) on update cascade;
alter table medical add foreign key(atten_id) references attendance(atten_id) on update cascade;

alter table course add foreign key(lec_id) references lecturer(lec_id) on update cascade;

alter table marks add foreign key(lec_id) references lecturer(lec_id) on update cascade;
alter table marks add foreign key(ug_id) references undergraduate(ug_id) on update cascade;
alter table marks add foreign key(course_id) references course(course_id) on update cascade;

alter table time_table add foreign key(lec_id) references lecturer(lec_id) on update cascade;
alter table time_table add foreign key(course_id) references course(course_id) on update cascade;
alter table time_table add foreign key(admin_id) references admin(admin_id) on update cascade;



CREATE VIEW ca_marks AS
SELECT 
    ug_id,
    course_id,
	ROUND(
        CASE 
            WHEN course_id IN ('ict2113') THEN 
                -- Calculate sum of all quizzes minus the lowest one (effectively top 2)
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.10 +
                COALESCE(mid_term, 0) * 0.20 

            WHEN course_id IN ('ict2122') THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) + COALESCE(quiz_4, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0),
                    COALESCE(quiz_4, 0)
                )) * 0.10 +
                COALESCE(assesment_1, 0) * 0.10 +
                COALESCE(mid_term, 0) * 0.20
            
            WHEN course_id IN ('ICT2133') THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.10 +
                (COALESCE(assesment_1, 0) + COALESCE(assesment_2, 0)) * 0.20 
            
            WHEN course_id IN ('ICT2142') THEN 
                COALESCE(assesment_1, 0) * 0.20 +
                COALESCE(mid_term, 0) * 0.20 

            WHEN course_id = 'ICT2152' THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.10 +
                (COALESCE(assesment_1, 0) + COALESCE(assesment_2, 0)) * 0.20 
          
            ELSE 0
        END,
        2
    ) AS ca_mark
FROM 
    marks;


CREATE VIEW ca_eligibility AS
SELECT 
    ug_id,
    course_id,
    CASE 
        WHEN course_id = 'ict2113' AND ca_mark >= 15 THEN 'Eligible'
        WHEN course_id = 'ict2122' AND ca_mark >= 20 THEN 'Eligible'
        WHEN course_id = 'ICT2133' AND ca_mark >= 15 THEN 'Eligible'
        WHEN course_id = 'ICT2142' AND ca_mark >= 20 THEN 'Eligible'
        WHEN course_id = 'ICT2152' AND ca_mark >= 15 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS ca_eligibility_status
FROM 
    ca_marks;


CREATE VIEW overall_eligibility AS
SELECT 
    a.ug_id,
    a.course_id,
    a.session_type,
    CASE 
        WHEN a.Eligibility = "Eligible" AND c.ca_eligibility_status = "Eligible" THEN "Eligible"
        ELSE "Not Eligible"
    END AS overrall_eligibility_status
FROM 
    attendance_eligibility AS a
JOIN 
    ca_eligibility AS c 
ON 
    a.ug_id = c.ug_id 
    AND a.course_id = c.course_id;


CREATE OR REPLACE VIEW final_exam_marks_view AS
SELECT
    ug_id,
    course_id,
    ROUND(
        CASE 
            
            WHEN course_id IN ('ict2113') THEN 
                -- Calculate sum of all quizzes minus the lowest one (effectively top 2)
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.05 +
                COALESCE(mid_term, 0) * 0.20 +
                COALESCE(final_theory, 0) * 0.40 +
                COALESCE(final_practical, 0) * 0.30

            WHEN course_id IN ('ict2122') THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) + COALESCE(quiz_4, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0),
                    COALESCE(quiz_4, 0)
                )) * 0.0333 +
                COALESCE(assesment_1, 0) * 0.10 +
                COALESCE(mid_term, 0) * 0.20 +
                COALESCE(final_theory, 0) * 0.60
            
            WHEN course_id IN ('ICT2133') THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.05 +
                (COALESCE(assesment_1, 0) + COALESCE(assesment_2, 0)) * 0.20 +
                COALESCE(final_theory, 0) * 0.40 +
                COALESCE(final_practical, 0) * 0.30
            
            WHEN course_id IN ('ICT2142') THEN 
                COALESCE(assesment_1, 0) * 0.20 +
                COALESCE(mid_term, 0) * 0.20 +
                COALESCE(final_practical, 0) * 0.60

            WHEN course_id = 'ICT2152' THEN 
                (COALESCE(quiz_1, 0) + COALESCE(quiz_2, 0) + COALESCE(quiz_3, 0) - 
                LEAST(
                    COALESCE(quiz_1, 0), 
                    COALESCE(quiz_2, 0), 
                    COALESCE(quiz_3, 0)
                )) * 0.05 +
                (COALESCE(assesment_1, 0) + COALESCE(assesment_2, 0)) * 0.20 +
                COALESCE(final_theory, 0) * 0.70
          
            ELSE 0
        END,
        2
    ) AS final_mark
FROM
    marks;

CREATE OR REPLACE VIEW exam_grades_view AS
SELECT 
    ug_id,
    course_id,
    final_mark,
    CASE
        WHEN final_mark <= 100 AND final_mark >= 85 THEN 'A+'
                WHEN final_mark < 85 AND final_mark >= 75 THEN 'A'
                WHEN final_mark < 75 AND final_mark >= 70 THEN 'A-'
                WHEN final_mark < 70 AND final_mark >= 65 THEN 'B+'
                WHEN final_mark < 65 AND final_mark >= 60 THEN 'B'
                WHEN final_mark < 60 AND final_mark >= 55 THEN 'B-'
                WHEN final_mark < 55 AND final_mark >= 50 THEN 'C+'
                WHEN final_mark < 50 AND final_mark >= 45 THEN 'C'
                WHEN final_mark < 45 AND final_mark >= 40 THEN 'C-'
                WHEN final_mark < 40 AND final_mark >= 35 THEN 'D+'
                WHEN final_mark < 35 AND final_mark >= 30 THEN 'D'
                ELSE 'E'
    END AS grade
FROM 
    final_exam_marks_view;



CREATE VIEW grade_point_view AS
SELECT
    final_exam_marks_view.ug_id,
    final_exam_marks_view.course_id,
    final_exam_marks_view.final_mark,
    IF(final_exam_marks_view.final_mark >= 90, 4.0,
    IF(final_exam_marks_view.final_mark >= 84, 4.0,
    IF(final_exam_marks_view.final_mark >= 75, 3.7,
    IF(final_exam_marks_view.final_mark >= 70, 3.3,
    IF(final_exam_marks_view.final_mark >= 65, 3.0,
    IF(final_exam_marks_view.final_mark >= 60, 2.7,
    IF(final_exam_marks_view.final_mark >= 55, 2.3,
    IF(final_exam_marks_view.final_mark >= 50, 2.0,
    IF(final_exam_marks_view.final_mark >= 45, 1.7,
    IF(final_exam_marks_view.final_mark >= 40, 1.3,
    IF(final_exam_marks_view.final_mark >= 35, 1.0, 0.0)
    )))))))))) AS Grade_point
FROM
    final_exam_marks_view;


CREATE VIEW SGPA_view AS
SELECT 
    grade_point_view.ug_id,
    ROUND((SUM(grade_point_view.Grade_point * course.credit) / SUM(course.credit)), 2) AS SGPA
FROM 
    grade_point_view
JOIN 
    course ON grade_point_view.course_id = course.course_id
GROUP BY 
    grade_point_view.ug_id;

select * from SGPA_view;


CREATE VIEW CGPA_view AS
SELECT 
    grade_point_view.ug_id,
    ROUND((SUM(grade_point_view.Grade_point * course.credit) / SUM(course.credit)), 2) AS CGPA
FROM 
    grade_point_view
JOIN 
    course ON grade_point_view.course_id = course.course_id
WHERE 
    course.course_id != 'ENG2112'  
GROUP BY 
    grade_point_view.ug_id;
